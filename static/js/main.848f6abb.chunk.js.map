{"version":3,"sources":["ColorBoxes/assets.js","IndexFiles/NavBar.js","IndexFiles/DrawerComponent.js","lightsout/Cell.js","lightsout/Board.js","Clicker/Clicker.js","Dice/Die.js","Dice/RollDie.js","Loto/Ball.js","Loto/Lottory.js","Flip/Coin.js","Flip/Flip.js","ColorBoxes/Box.js","ColorBoxes/ColorBoxes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colors","choiceFromArray","arr","Math","floor","random","length","NavBar","handleDrawerOpen","this","props","CssBaseline","AppBar","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","Component","DrawerComponent","handleopenHelloWorld","setState","st","openHelloWorld","state","bind","open","handleDrawerClose","routes","Drawer","anchor","Divider","List","ListItem","ListItemText","primary","Collapse","in","timeout","unmountOnExit","map","route","key","url","to","Button","name","defaultProps","Cell","handleClick","evt","flipCellsAroundMe","classes","isLit","className","Board","board","createBoard","hasWon","restartGame","i","nrows","row","j","ncols","push","chanceLightStartsOn","coord","split","Number","flipCell","y","x","flip","every","ele","tableTemplate","flipCellsAround","Clicker","eHandler","e","randInt","status","num","style","border","backgroundColor","Die","face","roll","RollDie","rand","prsntNum1","prsntNum2","currentNum1","currentNum2","isRolling","setTimeout","disabled","LottoBall","Lottory","Array","from","numB","newNum","test","maxNum","n","Coin","data","flag","src","alt","height","width","Filp","numOfFlips","headCount","tailCount","current","flipFlag","ans","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","marginTop","Box","handelClick","newColor","ColorBoxes","boxes","nBoxes","_","App","useState","setOpen","padding","maxWidth","maxHeight","exact","path","Flip","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.848f6abb.chunk.js","sourcesContent":["let colors= ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', \r\n            'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', \r\n            'red', 'silver', 'teal', 'white', 'yellow'];\r\n\r\n\r\nlet choiceFromArray = (arr)=>{\r\n    return arr[Math.floor(Math.random()*arr.length)]\r\n}\r\nmodule.exports = {colors,choiceFromArray}","import React, { Component } from 'react'\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        const {handleDrawerOpen} = this.props\r\n        return (\r\n            <>\r\n            <CssBaseline/>\r\n            <AppBar  >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n            // className={clsx(classes.menuButton, open && classes.hide)}\r\n                    >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Fun React Apps \r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default  NavBar","import React, { Component} from 'react'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\n// import ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\n// import ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nclass DrawerComponent extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state={\r\n            openHelloWorld:true\r\n        }\r\n        this.handleopenHelloWorld = this.handleopenHelloWorld.bind(this)\r\n\r\n    }\r\n\r\n    handleopenHelloWorld = () => {\r\n        this.setState(st=>{ return {openHelloWorld:!st.openHelloWorld}})\r\n    };\r\n    static  defaultProps ={\r\n        routes:[\r\n            {\r\n                url:\"/color\",\r\n                name:\"Colour Boxes\"\r\n            },{\r\n                url:'/rolldie',\r\n                name:\"Roll Die\"\r\n            },{\r\n                url:\"/click\",\r\n                name:\"Count\"\r\n            },{\r\n                url:'/lottory',\r\n                name:\"Lottory\"\r\n            },{\r\n                url:'/flip',\r\n                name:'Flip'\r\n            },{\r\n                url:'/lights-out',\r\n                name:'Lights Out'\r\n            }\r\n        ]\r\n    }\r\n    render() {\r\n        const {open,handleDrawerClose,routes} = this.props;\r\n        const {openHelloWorld} = this.state;\r\n        return (\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n            >\r\n            <IconButton onClick={handleDrawerClose}>\r\n                <ChevronLeftIcon />\r\n                </IconButton>\r\n                <Divider/>\r\n                <List>\r\n                    <ListItem onClick={this.handleopenHelloWorld}>\r\n                        <ListItemText primary=\"Hello World React\" />\r\n                        {openHelloWorld ? <ExpandLess /> : <ExpandMore />}\r\n                    </ListItem>\r\n                    <Collapse in={openHelloWorld} timeout=\"auto\" unmountOnExit>\r\n                        {routes.map(route=>(\r\n                            <Link key={route.url} to={route.url}>\r\n                            <ListItem key={route.url}>\r\n                            <Button key={route.url}>\r\n                            <ListItemText primary={route.name}/>\r\n                            </Button>\r\n                            </ListItem>\r\n                            </Link>\r\n                        ))}\r\n                    </Collapse>\r\n                </List>\r\n            </Drawer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DrawerComponent;\r\n","import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows:5,\n    ncols:5,\n    chanceLightStartsOn:0.4,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      board : this.createBoard(),\n      hasWon:false\n\n    }\n    // this.flipCellsAround = this.flipCellsAround.bind(this)\n    this.createBoard = this.createBoard.bind(this)\n    this.restartGame = this.restartGame.bind(this)\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i=0;i<this.props.nrows;i++){\n      let row = []\n      for(let j=0;j<this.props.ncols;j++){\n        row.push(Math.random()>this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /* handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    // console.table(y,x,\"Flip\")\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    function flip(y,x){\n      // flipCell(y,x)\n      // flipCell(y-1,x)\n      // flipCell(y+1,x)\n      // flipCell(y,x+1)\n      // flipCell(y,x-1)\n      for(let i=-1;i<2;i+=1){\n        for(let j=-1;j<2;j+=1){\n          ( j===0 || i===0 )&& flipCell(y+i,x+j)\n          // console.table(y+i,x+j)\n        }\n      }\n    }\n\n    flip(y,x)\n    // TODO: determine is the game has been won\n    // let hasWon = board.every((row)=>row.every(ele=>ele===false));\n    let hasWon = board.every((row)=>row.every(ele=>!ele));\n    this.setState({board, hasWon});\n  }\n\n  restartGame() {\n    this.setState({board:this.createBoard(),hasWon:false})    \n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    let tableTemplate = [];\n    for (let y=0;y<this.props.nrows;y++){\n      let row = [];\n      for(let x=0;x<this.props.ncols;x++){\n        let coord = `${y}-${x}`\n        row.push(<Cell isLit={this.state.board[y][x]} key={coord} flipCellsAroundMe={()=>this.flipCellsAround(coord)}/>)\n      }\n      tableTemplate.push(<tr key={y}>{row}</tr>)\n    }\n\n\n    if(this.state.hasWon){\n      return (\n        <div >\n          <div className=\"neon\">\n            <h1>You Won</h1>\n          </div>\n        \n        <button className=\"flux\" onClick={()=>{this.restartGame()}}>\n          Restart Game\n        </button>\n        </div>\n      )\n    }\n\n    return (\n      <div >\n        <div className=\"Board-title\">\n          <div className=\"neon\">Lights</div>\n          <div className=\"flux\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>\n            {tableTemplate}\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from 'react'\r\n\r\nclass Clicker extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            num : 0,\r\n            status:false\r\n        }\r\n        this.eHandler = this.eHandler.bind(this)\r\n    }\r\n\r\n    eHandler=(e)=>{\r\n        this.setState((state)=>{\r\n            let randInt = Math.floor(Math.random()*10)\r\n            if (randInt===7){\r\n                state.status = true;\r\n            }\r\n            return {num:randInt}\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Clicker\">\r\n                <h1>Click to Change Number</h1>\r\n                <p>Stops at 7</p>\r\n                <h1>{this.state.num}</h1>\r\n                <div className=\"Clicker-Button\">\r\n                    {this.state.status?<h1>Game Over</h1>:<button style={{border:\"none\",backgroundColor:\"inherit\"}} onClick={this.eHandler}>Click Me</button>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Clicker","import React, { Component } from 'react'\r\nimport './Die.css'\r\n\r\nclass Die extends Component{\r\n    render(){\r\n        return (\r\n            <i className={` Die fas fa-dice-${this.props.face} ${this.props.roll && 'rolling'}`}></i>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Die","import React, { Component } from 'react'\r\nimport Die from './Die'\r\nimport './RollDie.css'\r\n\r\nclass RollDie extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentNum1 : 'one',\r\n            currentNum2 : 'one',\r\n            isRolling :false\r\n        }\r\n        this.rand = this.rand.bind(this)\r\n\r\n    }\r\n    static defaultProps= {\r\n        num : ['one','two','three','four','five','six'],\r\n    }\r\n\r\n    rand = ()=>{\r\n        let prsntNum1 = this.props.num[Math.floor(Math.random()*this.props.num.length)]\r\n        let prsntNum2 = this.props.num[Math.floor(Math.random()*this.props.num.length)]\r\n        this.setState({currentNum1:prsntNum1,currentNum2:prsntNum2,isRolling:true})\r\n        setTimeout(()=>{\r\n            this.setState({isRolling:false})\r\n        },1000)\r\n    }\r\n    render(){\r\n        const {currentNum1,currentNum2,isRolling} = this.state;\r\n        return (\r\n            <div className=\"RollDie\">\r\n                <h1>Roll Dice</h1>\r\n                <Die face={currentNum1} roll={isRolling}/>\r\n                <Die face={currentNum2} roll={isRolling}/>\r\n                <h1>Die Rolled {currentNum1}&{currentNum2}</h1>\r\n                <button onClick={this.rand} disabled={isRolling}>Change</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RollDie","import React, { Component } from 'react'\r\nimport './Ball.css'\r\n\r\nclass LottoBall extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"circle\">\r\n                <h1>{this.props.num}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LottoBall","import React, { Component } from 'react'\r\nimport LottoBall from './Ball';\r\nimport \"./Lottory.css\"\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Lottory extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            num :Array.from({length:this.props.numB}).map(()=>(\"-\"))\r\n        }\r\n        this.newNum = this.newNum.bind(this)\r\n    }\r\n\r\n    static defaultProps ={\r\n        maxNum :40,\r\n        numB:6\r\n    }\r\n\r\n    newNum(){\r\n        let test = [];\r\n        for(let i=0;i<this.props.numB;i++){\r\n            test.push(Math.floor(Math.random()*this.props.maxNum))\r\n        }\r\n        this.setState({num:[...test]})\r\n    }\r\n    render(){\r\n        return (\r\n            <div className='Lottory'>\r\n                <h1> Genetrate Six Random Numbers</h1>\r\n                <div className=\"Lottory-balls\">\r\n                {this.state.num.map((n,i) => <LottoBall num={n} key={i}/>)}\r\n                </div>\r\n            <Button variant=\"contained\" onClick={this.newNum}>Change</Button>\r\n            </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default Lottory","import React, { Component } from 'react'\r\n\r\nclass Coin extends Component{\r\n    render(){\r\n        let data = [\r\n            [\"Tail\", \"https://www.pngitem.com/pimgs/m/123-1232373_coin-png-pic-heads-and-tails-indian-coin.png\"],\r\n            [\"Head\",\"https://upload.wikimedia.org/wikipedia/commons/c/cd/S_Half_Dollar_Obverse_2016.jpg\"]\r\n        ]\r\n        return (\r\n            <div className=\"Coin\">\r\n            <h1>{data[this.props.flag][0]}</h1>\r\n            <img src={data[this.props.flag][1]} alt={this.props.flag?\"Head\":\"Tail\"} height=\"100\" width=\"100\"></img>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Coin","import React, { Component } from \"react\";\r\nimport Coin from './Coin'\r\nimport './Flip.css'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Filp extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      numOfFlips : 0,\r\n      headCount : 0,\r\n      tailCount : 0,\r\n      current:null\r\n    }\r\n    this.flipFlag = this.flipFlag.bind(this)\r\n  }\r\n  flipFlag(){\r\n    let ans = (Math.floor(Math.random()*2))\r\n    ans?this.setState({headCount:this.state.headCount+1}):this.setState({tailCount:this.state.tailCount+1});\r\n    this.setState({numOfFlips:this.state.numOfFlips+1,current:ans})\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Flip\">\r\n        <h1>Flip a Coin</h1>\r\n        <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                Number Of Flips\r\n              </TableCell>\r\n              <TableCell>\r\n                Heads\r\n              </TableCell>\r\n              <TableCell>\r\n                Tails\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>\r\n              {this.state.numOfFlips}\r\n              </TableCell>\r\n              <TableCell>\r\n              {this.state.headCount}\r\n              </TableCell>\r\n              <TableCell>\r\n              {this.state.tailCount}\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        \r\n        <Button  style={{marginTop:\"1em\"}}variant=\"contained\" onClick={this.flipFlag}>Change</Button>\r\n        {this.state.current!=null && <Coin flag={this.state.current}/>}\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Filp;\r\n","import React, { Component } from 'react'\r\nimport {colors, choiceFromArray} from './assets'\r\nimport './Box.css'\r\nclass Box extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            color:choiceFromArray(colors)\r\n        }\r\n        this.handelClick = this.handelClick.bind(this)\r\n    }\r\n    handelClick(){\r\n        let newColor;\r\n        do {\r\n            newColor = choiceFromArray(colors)\r\n        }while(newColor===this.state.color)\r\n        this.setState({color:newColor})\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Box\" style={{backgroundColor:this.state.color}} onClick={this.handelClick}>\r\n                <h2>Box</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Box\r\n","import React, { Component } from 'react'\r\n\r\nimport Box from './Box'\r\nimport './ColorBox.css'\r\n\r\nclass ColorBoxes extends Component{\r\n    static defaultProps = { nBoxes: 18 } \r\n    render(){\r\n        let boxes = Array.from({length:this.props.nBoxes}).map((_,i)=>(<Box key={i}/>))\r\n        return(\r\n            <div>\r\n                <h1>Diffrent Colours</h1>\r\n                <p>Click To change Colors</p>\r\n            <div className=\"colorBoxes\">{boxes}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorBoxes","import React,{useState} from 'react';\nimport {Route,Switch,HashRouter} from 'react-router-dom'\n\nimport Paper from '@material-ui/core/Paper';\n\n\nimport Navbar from './IndexFiles/NavBar'\nimport DrawerComponent from \"./IndexFiles/DrawerComponent\";\n\nimport Board from './lightsout/Board'\nimport Clicker from './Clicker/Clicker'\nimport RollDie from './Dice/RollDie';\nimport Lottory from './Loto/Lottory';\nimport Flip from './Flip/Flip'\nimport ColorBoxes from './ColorBoxes/ColorBoxes'\n\nimport './App.css';\n\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n \n  return (\n    <HashRouter>\n    <div className=\"App\">\n      <Navbar handleDrawerOpen={handleDrawerOpen}/>\n      <DrawerComponent handleDrawerClose={handleDrawerClose} open={open}/>\n      <Paper style={{padding:\"2rem\",maxWidth:\"60%\",maxHeight:\"90vh\"}}>\n      <Switch>\n        <Route exact path='/color'component={ColorBoxes}/>\n        <Route exact path='/flip'component={Flip}/>\n        <Route exact path='/lottory'component={Lottory }/>\n        <Route exact path='/rolldie'component={RollDie}/>\n        <Route exact path='/click'component={Clicker}/>\n        <Route exact path='/lights-out'component={Board}/>\n        <Route component={Board}/>\n      </Switch>\n      </Paper>\n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}